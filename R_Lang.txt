Python & R


A key part of most programming languages is the idea of assigning values to variables. Each variable has a name like x, y, or highestSalary. Variable names cannot have spaces or special characters in them. A value can be 1, 1.1, or "hello". There are many other types of values that we'll explore later on.

Assigning a value to a variable allows you to store the value, and refer to it later easily. While in most languages, you use the = sign to assign values to variables, in R you use <-, also known as the "carrot". This is two separate characters, the less than sign (<), and a dash (-).

The = sign is also supported by R. It's mostly equivalent to <-, and you can read this blog post for a full explanation of the differences. We'll use <- in our lessons because the Google Style Guide recommends it.

# This is a comment, and so is any line that starts with a #
# Comments help provide information about the code.

# Assign the value 10 to the variable bearAwesomeness.
bearAwesomeness <- 10

# Assign the value 1.5 to the variable guineaPigAwesomeness.
guineaPigAwesomeness <- 1.5
dogAwesomeness <- 10
catAwesomeness <- 9.5

Print

A key part of exploring data is being able to print your results. Printing your results enables you to see what the data looks like, and see what your computations are doing. In R, we can print using the print function.

Functions

Functions are snippets of pre-written code that can take in a value and do some computations with it. In this case, the print function prints out a value so we can see it.

Functions are stored in variables, just like other values. We call the function using parentheses. For instance, to print the value 10, we would type print(10).

# We can print out values
print(10)

# We can also assign a value to a variable, then print the variable
lifeSavings <- 5.5
print(lifeSavings)
lifeSavings <- 9999
print(lifeSavings)


Types Of Variables

R treats 5.5 differently from "cat" since 5.5 is a number and cat is text. Every variable in R has a type. The type of a variable defines how it is stored, and how functions and other variables interact with it.

When we assign a value (like 5.5) to a variable (like lifeSavings), the variable can be said to be of the type of the value.

Two commonly occurring types in R are character, which holds text, and numeric, which holds a number. To look up which type a specific variable is, we can use the class function.

# Assign the value 800 to the variable runDistance.
runDistance <- 800

# This is of type "numeric".
print(class(runDistance))

# Assign the value "Peanut Butter Cup" to favoriteDessert
favoriteDessert <- "Peanut Butter Cup"

# This is of type "character", because it contains text.
print(class(favoriteDessert))

biggestDog <- "Mastiff"
mastiffCount <- 50
biggestDogType=class(biggestDog)
mastiffCountType=class(mastiffCount)


Vectors

Vectors are the primary way that values are stored in R. Vectors are collections of values of the same type. Vectors in R are different than mathematical vectors.

If you've worked with other programming languages, you'll be familiar with lists and arrays -- vectors are similar.

The reason why vectors are the core way to store data in R is that most data is naturally represented as a vector. For example, consider looking at the stock price of Apple on 3 consecutive days. You might end up with the values 114, 113, and 115. It would make sense to store these 3 values together, in a vector, as you analyze stock prices.

???114113115???[114113115]
Without the vector, we'd need to create three separate variables, price1, price2, and price3. This would make our code needlessly complex. Imagine if you wanted to explore and analyze the full history of Apple's stock price; you'd need thousands of separate variables for the thousands of values.

We can define vectors, or collections of elements, using the c function. To create a vector containing just the value 1, you would write c(1). To create a vector with two elements, 1 then 2, in that order, you would write c(1,2). Each value in a vector is called an element.

# Store a vector of Russian presidents.
russianPresidents <- c("Mikhail Gorbachev", "Boris Yeltsin", "Vladimir Putin")

# Store a vector of stock prices on consecutive days.
applePrices <- c(113, 114, 115)
fibonacci <- c(0,1,1,2)
print(fibonacci)


Vectors And Single Values
R stores almost every value as a vector. This may be surprising to you, but when we were assigning single values to variables earlier, R actually stored those values in vectors. a <- 1 will create a vector with only one element in it. R doesn't force us to write c(1) every time we want to create a vector with a single value.

This property simplifies a lot of computations in R, and lets us treat all variables the same way.

We can verify that this is true by comparing equality. We can use the identical function to check if two variables are exactly identical (i.e. they contain the same value). The identical function will return a value of type boolean, which has to be either TRUE, or FALSE. If the two objects are equal, the function will return TRUE, and if they're not, it'll return FALSE. We'll explore the boolean type more in the future.

dogCount <- 1
catCount <- c(1)

# We can see that these two assignments are identical.  dogCount is a vector, as is catCount.
print(identical(dogCount, catCount))

Indexing Vectors

When a vector only has a single element, like we saw in the beginning of this mission, it's relatively easy to work with. When a vector contains multiple elements, as most vectors do, we need a way to extract and work with the individual elements.

This is where vector indexing comes in. Indexing allows us retrieve individual elements from a vector. Here's a quick example:


a <- c(3,5)
a[1]
a[2]

R is a 1-indexed language. This means that to access the first element in the vector, we use the index 1. a[1] will get the first element in a, and a[2] will get the second element in a.

In the code area below, we've loaded the White House salaries data into the variable salaries. salaries is a vector containing all of the values for the salaries.



# Print the first element in salaries.
print(salaries[1])

# Print the 50th element in salaries
print(salaries[50])
salary10=salaries[10]
print(salary10)


Vector Length

Let's figure out how many White House staffers we have salaries for. We can look this up by calculating the length of the salaries vector. The length of a vector is the number of elements it contains. The length function in R returns the number of elements in a vector.

# Initialize the runDistances vector
runDistances <- c(20, 10.5, 30)

# Print the length of the vector.
print(length(runDistances))

# The salaries variable has been loaded in.
salariesLength <- length(salaries)
print(salariesLength)

Vector Math

In R, performing math operations on a vector will perform the same operation on each element of the vector. We can use all the standard mathematical operators, + for addition, - for subtraction, * for multiplication, and / for division.


a <- c(2, 4, 5)
a + 2
a + 2 will create a new vector that is the result of adding two to every element in a. This will not change the value of a unless we assign it back to the a variable.

# Create a vector of stock prices.
stockPrices <- c(10, 9, 11, 15)

# This results in a new vector.  See how every element has had 2 added to it.
# Every time you do math on a vector, it will change all the elements of the vector.
print(stockPrices + 2)

# But stockPrices is unaffected.
print(stockPrices)

lowerSalaries <- salaries/3
print(lowerSalaries)


Overwriting Variables


In the last screen, we discussed the following code snippet:


a <- c(2, 4, 5)
a + 2
What if we want to store the result of a + 2 back into a? We would need to overwrite the variable a and store the new value. You can overwrite a variable using the same <- carrot operator:


a <- a + 2
This will add 2 to every element in a and overwrite the original value. This is very commonly done when analyzing data.
# Initialize our list of stock prices again.
stockPrices <- c(10, 9, 11, 15)

# Multiply every stock price by two, and overwrite the variable.
stockPrices <- stockPrices * 2
print(stockPrices)

salaries <- salaries-5000
print(salaries)




Vector Types


Vectors in R can only contain elements of the same type. You can't, for example, mix character elements and numeric elements in the same vector. If you try to, all of the numeric elements will be converted to character elements.

mixedVector <- c("Fifteen", 15, 0)

# Everything in mixedVector is a character value.
print(mixedVector)

# mixedVector is of type character.
print(class(mixedVector))

o/p

[1] "Fifteen" "15"      "0"      
[1] "character"



Getting Help


If you ever need help with any R function, use the function help to get more information. For example, if you wanted to learn more about the class function, you would type help(class).

# Enter your code here.
help(class)

